#include <iostream>
#include <conio.h>
#include <mem.h>

int main() {
    int N, V, R, z, i, j, x, y;
    //Вводим N и V
    printf("Input N and V:\n");
    scanf("%d%*c%d", &N, &V);
    /*Подготавливаем массив s
     Это собсна "поле" на которой будет выводится спираль
     Его заполним нулями дабы отметить места, где будет спираль
     */
    int s[80][80];
    memset(s, 0, 25600);
    //Для того, чтобы не выйти за пределы массива заполняем края юордюром из звездочек
    for(i = 0; i < N + 2; ++i)
        s[i][0] = s[N + 1][i] = s[i][N + 1] = s[0][i] = '*';
    /*Подготавливаем массив d и стартовые координаты
    Массив пришлось сделать интовым потому что с++ отказывался выполнять на нем операции
     Первый столбец - изменение по горизонтали;
     Второй - изменение по вертикали;
     Третий - код начального символа;
     Четверый - код символа поворота, если движение против часовой
     Пятый - если движение по часовой
     */
    int d[4][5] ={
            {1, 0, 179, 192, 217},
            {0, -1, 45, 218, 192},
            {-1, 0, 179, 191, 218},
            {0, 1, 45, 217, 191}
    };
     int xn[4] = { 1, 1, N, N};
     int yn[4] = { 1, N, N, 1};
    //Собсна сами расчеты
    //Тут считаем начальное направление и место старта
    R = 1 - V%2;
    x = xn[V%4];
    y = yn[V%4];
    /* z - переменная отвечающая за строку в массиве d
     По свое сути она задает начальную точку в массиве d
     */
    z = (V - R + 4)%4;
    while (true){
        //Заполнение массива s частями спирали
      s[x][y] = d[z][2];
      /*Проверка следующей клетки
        При помощи первого и второго столбца массива d определяем направление
        Если следующая клетка не заполнена нулем то поворот
        В противном случае ставим начальный символ
       */
      if(s[x + d[z][0]][y + d[z][1]] != 0){
          //Заполняем поворотом, если R = 0 то движение против часовой, для часовой двигаем столбец на 1
          s[x][y] = d[z][3 + R];
          z =(z + 2*R + 3)%4;
          if(s[x + d[z][0]][y + d[z][1]] != 0)
              break;
      }
      x = x + d[z][0];
      y = y + d[z][1];
    }
    //Вывод спиральки
    for(i = 1; i <= N; i++){
        for(j = 1; j <=N; j++)
            putchar(s[i][j]);
        printf("\n");
    }
    //Чтоб консоль раньше времени не закрывалась
    system("pause");
    return 0;
}